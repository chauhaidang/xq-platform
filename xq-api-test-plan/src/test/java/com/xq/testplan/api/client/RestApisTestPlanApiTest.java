/*
 * TestPlan microservice
 * TestPlan microservice api documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: service.testplan@xq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xq.testplan.api.client;

import com.xq.testplan.api.invoker.ApiException;
import com.xq.testplan.api.model.ErrorResponse;
import com.xq.testplan.api.model.ListRequirementsDto;
import com.xq.testplan.api.model.Requirement;
import com.xq.testplan.api.model.Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RestApisTestPlanApi
 */
@Disabled
public class RestApisTestPlanApiTest {

    private final RestApisTestPlanApi api = new RestApisTestPlanApi();

    /**
     * Create a test requirement
     *
     * API endpoint to create a test requirement information by input request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRequirementTest() throws ApiException {
        Requirement requirement = null;
        Response response = api.createRequirement(requirement);
        // TODO: test validations
    }

    /**
     * Delete a test requirement
     *
     * API endpoint to delete a test requirement by uuid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String uuid = null;
        Response response = api.deleteAccount(uuid);
        // TODO: test validations
    }

    /**
     * Delete all test requirements
     *
     * API endpoint to delete all test requirements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllRequirementsTest() throws ApiException {
        Response response = api.deleteAllRequirements();
        // TODO: test validations
    }

    /**
     * Get a test requirement
     *
     * API endpoint to get a test requirement information by uuid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchAccountTest() throws ApiException {
        String uuid = null;
        Requirement response = api.fetchAccount(uuid);
        // TODO: test validations
    }

    /**
     * Get all test requirements
     *
     * API endpoint to get all test requirements
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRequirementsTest() throws ApiException {
        ListRequirementsDto response = api.getAllRequirements();
        // TODO: test validations
    }

    /**
     * Update a test requirement
     *
     * API endpoint to update a test requirement by input request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        String uuid = null;
        Requirement requirement = null;
        Response response = api.updateAccount(uuid, requirement);
        // TODO: test validations
    }

}
