/*
 * TestPlan microservice
 * TestPlan microservice api documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: service.testplan@xq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xq.testplan.api.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.xq.testplan.api.model.Requirement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.xq.testplan.api.invoker.ApiClient;
/**
 * Requirements response payload object
 */
@JsonPropertyOrder({
  ListRequirementsDto.JSON_PROPERTY_TOTAL,
  ListRequirementsDto.JSON_PROPERTY_REQUIREMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-30T16:29:31.396499+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.12.0")
public class ListRequirementsDto {
  public static final String JSON_PROPERTY_TOTAL = "total";
  @javax.annotation.Nullable
  private Integer total;

  public static final String JSON_PROPERTY_REQUIREMENTS = "requirements";
  @javax.annotation.Nullable
  private List<Requirement> requirements = new ArrayList<>();

  public ListRequirementsDto() { 
  }

  public ListRequirementsDto total(@javax.annotation.Nullable Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total number of requirements
   * @return total
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotal(@javax.annotation.Nullable Integer total) {
    this.total = total;
  }


  public ListRequirementsDto requirements(@javax.annotation.Nullable List<Requirement> requirements) {
    this.requirements = requirements;
    return this;
  }

  public ListRequirementsDto addRequirementsItem(Requirement requirementsItem) {
    if (this.requirements == null) {
      this.requirements = new ArrayList<>();
    }
    this.requirements.add(requirementsItem);
    return this;
  }

  /**
   * List of requirement objects
   * @return requirements
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Requirement> getRequirements() {
    return requirements;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirements(@javax.annotation.Nullable List<Requirement> requirements) {
    this.requirements = requirements;
  }


  /**
   * Return true if this ListRequirementsDto object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRequirementsDto listRequirementsDto = (ListRequirementsDto) o;
    return Objects.equals(this.total, listRequirementsDto.total) &&
        Objects.equals(this.requirements, listRequirementsDto.requirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, requirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRequirementsDto {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `total` to the URL query string
    if (getTotal() != null) {
      joiner.add(String.format("%stotal%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTotal()))));
    }

    // add `requirements` to the URL query string
    if (getRequirements() != null) {
      for (int i = 0; i < getRequirements().size(); i++) {
        if (getRequirements().get(i) != null) {
          joiner.add(getRequirements().get(i).toUrlQueryString(String.format("%srequirements%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

