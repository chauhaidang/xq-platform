/* tslint:disable */
/* eslint-disable */
/**
 * TestPlan microservice
 * TestPlan microservice api documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: service.testplan@xq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'apiPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorCode'?: ErrorResponseErrorCodeEnum;
    /**
     * Error message returned from implementation logic
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorMessage'?: string;
    /**
     * Date time when error occur
     * @type {string}
     * @memberof ErrorResponse
     */
    'errorTime'?: string;
}

export const ErrorResponseErrorCodeEnum = {
    _100Continue: '100 CONTINUE',
    _101SwitchingProtocols: '101 SWITCHING_PROTOCOLS',
    _102Processing: '102 PROCESSING',
    _103EarlyHints: '103 EARLY_HINTS',
    _103Checkpoint: '103 CHECKPOINT',
    _200Ok: '200 OK',
    _201Created: '201 CREATED',
    _202Accepted: '202 ACCEPTED',
    _203NonAuthoritativeInformation: '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent: '204 NO_CONTENT',
    _205ResetContent: '205 RESET_CONTENT',
    _206PartialContent: '206 PARTIAL_CONTENT',
    _207MultiStatus: '207 MULTI_STATUS',
    _208AlreadyReported: '208 ALREADY_REPORTED',
    _226ImUsed: '226 IM_USED',
    _300MultipleChoices: '300 MULTIPLE_CHOICES',
    _301MovedPermanently: '301 MOVED_PERMANENTLY',
    _302Found: '302 FOUND',
    _302MovedTemporarily: '302 MOVED_TEMPORARILY',
    _303SeeOther: '303 SEE_OTHER',
    _304NotModified: '304 NOT_MODIFIED',
    _305UseProxy: '305 USE_PROXY',
    _307TemporaryRedirect: '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect: '308 PERMANENT_REDIRECT',
    _400BadRequest: '400 BAD_REQUEST',
    _401Unauthorized: '401 UNAUTHORIZED',
    _402PaymentRequired: '402 PAYMENT_REQUIRED',
    _403Forbidden: '403 FORBIDDEN',
    _404NotFound: '404 NOT_FOUND',
    _405MethodNotAllowed: '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable: '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired: '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout: '408 REQUEST_TIMEOUT',
    _409Conflict: '409 CONFLICT',
    _410Gone: '410 GONE',
    _411LengthRequired: '411 LENGTH_REQUIRED',
    _412PreconditionFailed: '412 PRECONDITION_FAILED',
    _413PayloadTooLarge: '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge: '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong: '414 URI_TOO_LONG',
    _414RequestUriTooLong: '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType: '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable: '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed: '417 EXPECTATION_FAILED',
    _418IAmATeapot: '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource: '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure: '420 METHOD_FAILURE',
    _421DestinationLocked: '421 DESTINATION_LOCKED',
    _422UnprocessableEntity: '422 UNPROCESSABLE_ENTITY',
    _423Locked: '423 LOCKED',
    _424FailedDependency: '424 FAILED_DEPENDENCY',
    _425TooEarly: '425 TOO_EARLY',
    _426UpgradeRequired: '426 UPGRADE_REQUIRED',
    _428PreconditionRequired: '428 PRECONDITION_REQUIRED',
    _429TooManyRequests: '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge: '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons: '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError: '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented: '501 NOT_IMPLEMENTED',
    _502BadGateway: '502 BAD_GATEWAY',
    _503ServiceUnavailable: '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout: '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported: '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates: '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage: '507 INSUFFICIENT_STORAGE',
    _508LoopDetected: '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded: '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended: '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired: '511 NETWORK_AUTHENTICATION_REQUIRED'
} as const;

export type ErrorResponseErrorCodeEnum = typeof ErrorResponseErrorCodeEnum[keyof typeof ErrorResponseErrorCodeEnum];

/**
 * Requirements response payload object
 * @export
 * @interface ListRequirementsDto
 */
export interface ListRequirementsDto {
    /**
     * Total number of requirements
     * @type {number}
     * @memberof ListRequirementsDto
     */
    'total'?: number;
    /**
     * List of requirement objects
     * @type {Array<Requirement>}
     * @memberof ListRequirementsDto
     */
    'requirements'?: Array<Requirement>;
}
/**
 * Requirement request payload object
 * @export
 * @interface Requirement
 */
export interface Requirement {
    /**
     * Requirement title
     * @type {string}
     * @memberof Requirement
     */
    'title': string;
    /**
     * Requirement description
     * @type {string}
     * @memberof Requirement
     */
    'description': string;
    /**
     * Requirement scopes
     * @type {string}
     * @memberof Requirement
     */
    'scopes': string;
    /**
     * Requirement tags
     * @type {string}
     * @memberof Requirement
     */
    'tags': string;
    /**
     * Requirement references
     * @type {string}
     * @memberof Requirement
     */
    'references': string;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'statusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'statusMsg'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'uuid'?: string;
}

/**
 * RESTAPISTestPlanApi - axios parameter creator
 * @export
 */
export const RESTAPISTestPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API endpoint to create a test requirement information by input request
         * @summary Create a test requirement
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequirement: async (requirement: Requirement, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requirement' is not null or undefined
            assertParamExists('createRequirement', 'requirement', requirement)
            const localVarPath = `/api/requirement/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint to delete a test requirement by uuid
         * @summary Delete a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteAccount', 'uuid', uuid)
            const localVarPath = `/api/requirement/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint to delete all test requirements
         * @summary Delete all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllRequirements: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/requirement/delete/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint to get a test requirement information by uuid
         * @summary Get a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAccount: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('fetchAccount', 'uuid', uuid)
            const localVarPath = `/api/requirement/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint to get all test requirements
         * @summary Get all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRequirements: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/requirement/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API endpoint to update a test requirement by input request
         * @summary Update a test requirement
         * @param {string} uuid 
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (uuid: string, requirement: Requirement, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('updateAccount', 'uuid', uuid)
            // verify required parameter 'requirement' is not null or undefined
            assertParamExists('updateAccount', 'requirement', requirement)
            const localVarPath = `/api/requirement/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPISTestPlanApi - functional programming interface
 * @export
 */
export const RESTAPISTestPlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPISTestPlanApiAxiosParamCreator(configuration)
    return {
        /**
         * API endpoint to create a test requirement information by input request
         * @summary Create a test requirement
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRequirement(requirement: Requirement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRequirement(requirement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.createRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API endpoint to delete a test requirement by uuid
         * @summary Delete a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccount(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccount(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.deleteAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API endpoint to delete all test requirements
         * @summary Delete all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllRequirements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllRequirements(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.deleteAllRequirements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API endpoint to get a test requirement information by uuid
         * @summary Get a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAccount(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Requirement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAccount(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.fetchAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API endpoint to get all test requirements
         * @summary Get all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRequirements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRequirementsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRequirements(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.getAllRequirements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * API endpoint to update a test requirement by input request
         * @summary Update a test requirement
         * @param {string} uuid 
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(uuid: string, requirement: Requirement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(uuid, requirement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPISTestPlanApi.updateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPISTestPlanApi - factory interface
 * @export
 */
export const RESTAPISTestPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPISTestPlanApiFp(configuration)
    return {
        /**
         * API endpoint to create a test requirement information by input request
         * @summary Create a test requirement
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRequirement(requirement: Requirement, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.createRequirement(requirement, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint to delete a test requirement by uuid
         * @summary Delete a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.deleteAccount(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint to delete all test requirements
         * @summary Delete all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllRequirements(options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.deleteAllRequirements(options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint to get a test requirement information by uuid
         * @summary Get a test requirement
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAccount(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Requirement> {
            return localVarFp.fetchAccount(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint to get all test requirements
         * @summary Get all test requirements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRequirements(options?: RawAxiosRequestConfig): AxiosPromise<ListRequirementsDto> {
            return localVarFp.getAllRequirements(options).then((request) => request(axios, basePath));
        },
        /**
         * API endpoint to update a test requirement by input request
         * @summary Update a test requirement
         * @param {string} uuid 
         * @param {Requirement} requirement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(uuid: string, requirement: Requirement, options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.updateAccount(uuid, requirement, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPISTestPlanApi - object-oriented interface
 * @export
 * @class RESTAPISTestPlanApi
 * @extends {BaseAPI}
 */
export class RESTAPISTestPlanApi extends BaseAPI {
    /**
     * API endpoint to create a test requirement information by input request
     * @summary Create a test requirement
     * @param {Requirement} requirement 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public createRequirement(requirement: Requirement, options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).createRequirement(requirement, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint to delete a test requirement by uuid
     * @summary Delete a test requirement
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public deleteAccount(uuid: string, options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).deleteAccount(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint to delete all test requirements
     * @summary Delete all test requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public deleteAllRequirements(options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).deleteAllRequirements(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint to get a test requirement information by uuid
     * @summary Get a test requirement
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public fetchAccount(uuid: string, options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).fetchAccount(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint to get all test requirements
     * @summary Get all test requirements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public getAllRequirements(options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).getAllRequirements(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API endpoint to update a test requirement by input request
     * @summary Update a test requirement
     * @param {string} uuid 
     * @param {Requirement} requirement 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPISTestPlanApi
     */
    public updateAccount(uuid: string, requirement: Requirement, options?: RawAxiosRequestConfig) {
        return RESTAPISTestPlanApiFp(this.configuration).updateAccount(uuid, requirement, options).then((request) => request(this.axios, this.basePath));
    }
}



